AWSTemplateFormatVersion: 2010-09-09
Description: Serverless HTTP API, Website, with Auth and a DB

Parameters:
  ParamLambdaBucketUri:
    Type: String
  ParamProjectPrefix:
    Type: String
  ParamProjectName:
    Type: String

Resources:
  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub '${ParamProjectPrefix}-${ParamProjectName}-api'
      Description: API Gateway
      ProtocolType: HTTP

  ApiGatewayDefaultStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties: 
      StageName: $default
      ApiId: !Ref ApiGateway
      AutoDeploy: true

  ApiGatewayDefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: $default
      AuthorizationType: NONE
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGatewayDefaultRouteIntegration

  ApiGatewayDefaultRouteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties: 
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref ParamLambdaBucketUri
        S3Key: lambda.zip
      Description: Lambda function
      FunctionName:  !Sub '${ParamProjectPrefix}-${ParamProjectName}-server'
      Role: !GetAtt LambdaIAMRole.Arn
      Handler: "main"
      Runtime: "go1.x"
      MemorySize: 128
      PackageType: "Zip"
      Timeout: 10
      
  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ParamProjectPrefix}-${ParamProjectName}-server:*
          PolicyName: lambda

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ParamProjectPrefix}-${ParamProjectName}-server
      RetentionInDays: 7

  S3BucketWebAssets:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ParamProjectPrefix}-${ParamProjectName}-web-assets'

  S3BucketWebAssetsPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${S3BucketWebAssets}/*'
      Bucket: !Ref S3BucketWebAssets

Outputs:
  ApiGatewayUrl:
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com
  S3BucketWebAssets:
    Value: !Sub '${ParamProjectPrefix}-${ParamProjectName}-web-assets'
  S3WebsiteUrl:
    Value: !Sub 'https://${ParamProjectPrefix}-${ParamProjectName}-web-assets.s3.${AWS::Region}.amazonaws.com'
